[{
  "_id": "6489714ed97326f51535995b",
  "username": "cookiecutter",
  "repository": "cookiecutter",
  "issues": [
    {
      "id": 1513,
      "created_at": "2021-04-10T21:02:09Z",
      "closed_at": "2021-04-29T21:40:23Z",
      "title": "Error reading yaml file using `poyo` - `ValueError: Parent of ChildMixin instance needs to be a Container.`",
      "labels": "bug, duplicate",
      "commits": [
        {
          "hash": "cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb",
          "commit_date": "2021-04-22T22:01:32Z",
          "parents": "2fd137f2c2d508cd0d194301101da7e85df6994e",
          "stat": {
            "total": 1,
            "additions": 16,
            "deletions": 15,
            "files": [
              {
                "sha": "d93501f36862cecb57d20cb104f1022078d84d10",
                "filename": "cookiecutter/config.py",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/cookiecutter%2Fconfig.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/cookiecutter%2Fconfig.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/cookiecutter%2Fconfig.py?ref=cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb",
                "patch": "@@ -45,7 +45,7 @@ def merge_configs(default, overwrite):\n         # Make sure to preserve existing items in\n         # nested dicts, for example `abbreviations`\n         if isinstance(v, dict):\n-            new_config[k] = merge_configs(default[k], v)\n+            new_config[k] = merge_configs(default.get(k, {}), v)\n         else:\n             new_config[k] = v\n "
              }
            ],
            "tests": [
              {
                "sha": "c46ac4a60d7e8b8c9a81601c24d6dac697ef2842",
                "filename": "tests/test-config/valid-config.yaml",
                "status": "modified",
                "additions": 6,
                "deletions": 0,
                "changes": 6,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest-config%2Fvalid-config.yaml",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest-config%2Fvalid-config.yaml",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Ftest-config%2Fvalid-config.yaml?ref=cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb",
                "patch": "@@ -2,6 +2,12 @@ default_context:\n     full_name: \"Firstname Lastname\"\n     email: \"firstname.lastname@gmail.com\"\n     github_username: \"example\"\n+    project:\n+        description: \"description\"\n+        tags:\n+            - \"first\"\n+            - \"second\"\n+            - \"third\"\n cookiecutters_dir: \"/home/example/some-path-to-templates\"\n replay_dir: \"/home/example/some-path-to-replay-files\"\n abbreviations:"
              },
              {
                "sha": "a0e81f26619c88184c6987c611f28c9a1b77f8cd",
                "filename": "tests/test_get_config.py",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest_get_config.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest_get_config.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Ftest_get_config.py?ref=cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb",
                "patch": "@@ -59,6 +59,10 @@ def test_get_config():\n             'full_name': 'Firstname Lastname',\n             'email': 'firstname.lastname@gmail.com',\n             'github_username': 'example',\n+            'project': {\n+                'description': 'description',\n+                'tags': ['first', 'second', 'third',],\n+            },\n         },\n         'abbreviations': {\n             'gh': 'https://github.com/{0}.git',"
              },
              {
                "sha": "560c1d873c50a924be5dbaac798e67a94beaf40e",
                "filename": "tests/test_get_user_config.py",
                "status": "modified",
                "additions": 4,
                "deletions": 0,
                "changes": 4,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest_get_user_config.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb/tests%2Ftest_get_user_config.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Ftest_get_user_config.py?ref=cc92e3cc00a3d2acd1ef6d38cf5731478dade3cb",
                "patch": "@@ -46,6 +46,10 @@ def custom_config():\n             'full_name': 'Firstname Lastname',\n             'email': 'firstname.lastname@gmail.com',\n             'github_username': 'example',\n+            'project': {\n+                'description': 'description',\n+                'tags': ['first', 'second', 'third',],\n+            },\n         },\n         'cookiecutters_dir': '/home/example/some-path-to-templates',\n         'replay_dir': '/home/example/some-path-to-replay-files',"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "pipenv run pytest -- tests/test_get_config.py",
      "testStepsFull": "pipenv run pytest"
    },
    {
      "id": 18,
      "created_at": "2013-08-16T10:36:09Z",
      "closed_at": "2013-08-19T19:07:25Z",
      "title": "cookiecutter throws unicode exceptions on image files",
      "labels": "bug",
      "text_based": false,
      "commits": [
        {
          "hash": "0e38a7068375e065f00a6a6ce29459e91261f11b",
          "commit_date": "2013-08-18T13:16:22Z",
          "parents": "312bcc9f78f1ffe0c0fa2c483d1dea5a101c5871",
          "stat": {
            "total": 12,
            "additions": 57,
            "deletions": 45,
            "files": [
              {
                "sha": "a20d6bd722a36ccd337e467bb54e02306be0352a",
                "filename": "cookiecutter/generate.py",
                "status": "modified",
                "additions": 27,
                "deletions": 10,
                "changes": 37,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/cookiecutter%2Fgenerate.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/cookiecutter%2Fgenerate.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/cookiecutter%2Fgenerate.py?ref=0e38a7068375e065f00a6a6ce29459e91261f11b",
                "patch": "@@ -10,10 +10,12 @@\n \n import logging\n import os\n+import shutil\n import sys\n \n from jinja2 import FileSystemLoader, Template\n from jinja2.environment import Environment\n+from binaryornot.check import is_binary\n \n from .exceptions import NonTemplatedInputDirException\n from .utils import make_sure_path_exists, unicode_open\n@@ -26,6 +28,7 @@\n     import json\n     from collections import OrderedDict\n \n+\n def generate_context(config_file='cookiecutter.json'):\n     \"\"\"\n     Generates the context for a Cookiecutter project template.\n@@ -55,7 +58,7 @@ def generate_files(template_dir, context=None):\n     :param input_dir: Project template input directory.\n     :paramtype input_dir: directory\n     \"\"\"\n-    \n+\n     logging.debug('Generating project from {0}...'.format(template_dir))\n \n     context = context or {}\n@@ -68,6 +71,7 @@ def generate_files(template_dir, context=None):\n     if output_dir == template_dir:\n         raise NonTemplatedInputDirException\n \n+    logging.debug(\"output_dir is {0}\".format(output_dir))\n     make_sure_path_exists(output_dir)\n \n     for root, dirs, files in os.walk(template_dir):\n@@ -82,18 +86,31 @@ def generate_files(template_dir, context=None):\n             make_sure_path_exists(rendered_dirname)\n \n         for f in files:\n-            # Render the file\n+            logging.debug(\"f is {0}\".format(f))\n             infile = os.path.join(root, f)\n-            tmpl = env.get_template(infile)\n-            rendered_file = tmpl.render(**context)\n+            logging.debug(\"infile is {0}\".format(infile))\n \n             # Write it to the corresponding place in output_dir\n             outfile = infile.replace(template_dir, output_dir, 1)\n+            logging.debug(\"outfile is {0}\".format(outfile))\n+\n+            # Just copy over binary files. Don't render.\n+            logging.debug(\"Check {0} to see if it's a binary\".format(infile))\n+            if is_binary(infile):\n+                logging.debug(\"Copying binary {0} to {1} without rendering\"\n+                              .format(infile, outfile))\n+                shutil.copyfile(infile, outfile)\n+\n+            else:\n+\n+                # Render the file\n+                tmpl = env.get_template(infile)\n+                rendered_file = tmpl.render(**context)\n \n-            # Render the output filename before writing\n-            name_tmpl = Template(outfile)\n-            rendered_name = name_tmpl.render(**context)\n-            logging.debug(\"Writing {0}\".format(rendered_name))\n+                # Render the output filename before writing\n+                name_tmpl = Template(outfile)\n+                rendered_name = name_tmpl.render(**context)\n+                logging.debug(\"Writing {0}\".format(rendered_name))\n \n-            with unicode_open(rendered_name, 'w') as fh:\n-                fh.write(rendered_file)\n+                with unicode_open(rendered_name, 'w') as fh:\n+                    fh.write(rendered_file)"
              },
              {
                "sha": "2367ba0e3172162570ef00c5c74f0f0dac1a17a0",
                "filename": "setup.py",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/setup.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/setup.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/setup.py?ref=0e38a7068375e065f00a6a6ce29459e91261f11b",
                "patch": "@@ -17,7 +17,7 @@\n readme = open('README.rst').read()\n history = open('HISTORY.rst').read().replace('.. :changelog:', '')\n \n-requirements = ['jinja2>=2.4']\n+requirements = ['binaryornot>=0.1.1', 'jinja2>=2.4']\n \n if sys.version_info[:2] < (2, 7):\n     requirements.append('argparse')"
              }
            ],
            "tests": [
              {
                "sha": "e04d51eb4d78d2b7b78cfb858dbe44922a3f1ab9",
                "filename": "tests/input{{binary_test}}/logo.png",
                "status": "added",
                "additions": 0,
                "deletions": 0,
                "changes": 0,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Flogo.png",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Flogo.png",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Finput%7B%7Bbinary_test%7D%7D%2Flogo.png?ref=0e38a7068375e065f00a6a6ce29459e91261f11b"
              },
              {
                "sha": "43b29487c991f3adcda38e75d06cf6b1b4a1fa6b",
                "filename": "tests/input{{binary_test}}/readme.txt",
                "status": "added",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Freadme.txt",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Freadme.txt",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Finput%7B%7Bbinary_test%7D%7D%2Freadme.txt?ref=0e38a7068375e065f00a6a6ce29459e91261f11b",
                "patch": "@@ -0,0 +1 @@\n+I eat {{ binary_test }}\n\\ No newline at end of file"
              },
              {
                "sha": "b058f1cd1b998892d9d6e69c2a3bfcd4b04b42ca",
                "filename": "tests/input{{binary_test}}/some_font.otf",
                "status": "added",
                "additions": 0,
                "deletions": 0,
                "changes": 0,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Fsome_font.otf",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Finput%7B%7Bbinary_test%7D%7D%2Fsome_font.otf",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Finput%7B%7Bbinary_test%7D%7D%2Fsome_font.otf?ref=0e38a7068375e065f00a6a6ce29459e91261f11b"
              },
              {
                "sha": "2960f4b52753d26d9e45218aebe3341cdf284ea9",
                "filename": "tests/test_generate.py",
                "status": "modified",
                "additions": 16,
                "deletions": 1,
                "changes": 17,
                "blob_url": "https://github.com/cookiecutter/cookiecutter/blob/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Ftest_generate.py",
                "raw_url": "https://github.com/cookiecutter/cookiecutter/raw/0e38a7068375e065f00a6a6ce29459e91261f11b/tests%2Ftest_generate.py",
                "contents_url": "https://api.github.com/repos/cookiecutter/cookiecutter/contents/tests%2Ftest_generate.py?ref=0e38a7068375e065f00a6a6ce29459e91261f11b",
                "patch": "@@ -40,12 +40,25 @@ def test_generate_files(self):\n         simple_text = open('tests/inputpizza/simple.txt', 'rt').read()\n         self.assertEqual(simple_text, 'I eat pizza')\n \n+    def test_generate_files_binaries(self):\n+        generate.generate_files(\n+            context={'binary_test': 'binary_files'},\n+            template_dir='tests/input{{binary_test}}'\n+        )\n+        self.assertTrue(os.path.isfile('tests/inputbinary_files/logo.png'))\n+        self.assertTrue(os.path.isfile('tests/inputbinary_files/readme.txt'))\n+        self.assertTrue(\n+            os.path.isfile('tests/inputbinary_files/some_font.otf')\n+        )\n+\n     def test_generate_context(self):\n         context = generate.generate_context(config_file='tests/json/test.json')\n         self.assertEqual(context, {\"test\": {\"1\": 2}})\n \n     def test_output_folder(self):\n-        context = generate.generate_context(config_file='tests/json2/stuff.json')\n+        context = generate.generate_context(\n+            config_file='tests/json2/stuff.json'\n+        )\n         logging.debug('Context is {0}'.format(context))\n         generate.generate_files(\n             context=context,\n@@ -70,6 +83,8 @@ def tearDown(self):\n             shutil.rmtree('tests/inputpizza')\n         if os.path.exists('tests/inputgreen'):\n             shutil.rmtree('tests/inputgreen')\n+        if os.path.exists('tests/inputbinary_files'):\n+            shutil.rmtree('tests/inputbinary_files')\n \n if __name__ == '__main__':\n     unittest.main()"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "installSteps": "pipenv --python 3.8\npipenv install pytest\npipenv install pytest-mock\npipenv install pytest-cov\npipenv install freezegun\npipenv run python setup.py install",
      "testSteps": "pipenv run pytest -- tests/test_generate.py",
      "testStepsFull": "pipenv run pytest"
    }
  ],
  "installSteps": "pipenv --python 3.8\npipenv install -r test_requirements.txt\npipenv run python setup.py install"
},
{
  "_id": "648981e2d97326f515359962",
  "username": "scrapy",
  "repository": "scrapy",
  "issues": [
    {
      "id": 2552,
      "created_at": "2017-02-09T11:24:35Z",
      "closed_at": "2019-11-19T08:50:12Z",
      "title": "scrapy.Request no init error on invalid url",
      "labels": "bug",
      "commits": [
        {
          "hash": "f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a",
          "commit_date": "2019-10-22T13:48:02Z",
          "parents": "1d5c270ce8caf954ce83c8db262e2a35707e0c5e",
          "stat": {
            "total": 1,
            "additions": 4,
            "deletions": 3,
            "files": [
              {
                "sha": "76a428199ad4ad919b8b1eb6caeec6880e446af6",
                "filename": "scrapy/http/request/__init__.py",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/scrapy/scrapy/blob/f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a/scrapy%2Fhttp%2Frequest%2F__init__.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a/scrapy%2Fhttp%2Frequest%2F__init__.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/scrapy%2Fhttp%2Frequest%2F__init__.py?ref=f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a",
                "patch": "@@ -66,7 +66,7 @@ def _set_url(self, url):\n         s = safe_url_string(url, self.encoding)\n         self._url = escape_ajax(s)\n \n-        if ':' not in self._url:\n+        if ('://' not in self._url) and (not self._url.startswith('data:')):\n             raise ValueError('Missing scheme in request url: %s' % self._url)\n \n     url = property(_get_url, obsolete_setter(_set_url, 'url'))"
              }
            ],
            "tests": [
              {
                "sha": "64f1184c356eed21946b01c17bd4ff6006b13d3c",
                "filename": "tests/test_http_request.py",
                "status": "modified",
                "additions": 2,
                "deletions": 0,
                "changes": 2,
                "blob_url": "https://github.com/scrapy/scrapy/blob/f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a/tests%2Ftest_http_request.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a/tests%2Ftest_http_request.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/tests%2Ftest_http_request.py?ref=f701f5b0db10faef08e4ed9a21b98fd72f9cfc9a",
                "patch": "@@ -52,6 +52,8 @@ def test_init(self):\n \n     def test_url_no_scheme(self):\n         self.assertRaises(ValueError, self.request_class, 'foo')\n+        self.assertRaises(ValueError, self.request_class, '/foo/')\n+        self.assertRaises(ValueError, self.request_class, '/foo:bar')\n \n     def test_headers(self):\n         # Different ways of setting headers attribute"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "pipenv run pytest tests/test_http_request.py "
    },
    {
      "id": 1265,
      "created_at": "2015-05-29T14:14:45Z",
      "closed_at": "2015-06-01T23:31:53Z",
      "title": "Backward incompatibility for relocated paths in settings",
      "labels": "bug",
      "text_based": false,
      "commits": [
        {
          "hash": "d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d",
          "commit_date": "2015-06-01T23:31:46Z",
          "parents": "bd2fe996aabe5467a89d9eff6831e6b0bf731be4",
          "stat": {
            "total": 9,
            "additions": 116,
            "deletions": 107,
            "files": [
              {
                "sha": "423ca43e25a7cd41757b0c8af56a01e117f18906",
                "filename": "scrapy/utils/conf.py",
                "status": "modified",
                "additions": 18,
                "deletions": 4,
                "changes": 22,
                "blob_url": "https://github.com/scrapy/scrapy/blob/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/scrapy%2Futils%2Fconf.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/scrapy%2Futils%2Fconf.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/scrapy%2Futils%2Fconf.py?ref=d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d",
                "patch": "@@ -5,16 +5,30 @@\n import six\n from six.moves.configparser import SafeConfigParser\n \n+from scrapy.utils.deprecate import update_classpath\n \n-def build_component_list(base, custom):\n+\n+def build_component_list(base, custom, convert=update_classpath):\n     \"\"\"Compose a component list based on a custom and base dict of components\n     (typically middlewares or extensions), unless custom is already a list, in\n     which case it's returned.\n     \"\"\"\n+\n+    def _check_components(complist):\n+        if len({convert(c) for c in complist}) != len(complist):\n+            raise ValueError('Some paths in {!r} convert to the same object, '\n+                             'please update your settings'.format(complist))\n+\n     if isinstance(custom, (list, tuple)):\n-        return custom\n-    compdict = base.copy()\n-    compdict.update(custom)\n+        _check_components(custom)\n+        return type(custom)(convert(c) for c in custom)\n+\n+    def _map_keys(compdict):\n+        _check_components(compdict)\n+        return {convert(k): v for k, v in six.iteritems(compdict)}\n+\n+    compdict = _map_keys(base)\n+    compdict.update(_map_keys(custom))\n     items = (x for x in six.iteritems(compdict) if x[1] is not None)\n     return [x[0] for x in sorted(items, key=itemgetter(1))]\n "
              },
              {
                "sha": "37e94fae946b59e7d6959989cc4a81cbde8ba426",
                "filename": "scrapy/utils/deprecate.py",
                "status": "modified",
                "additions": 34,
                "deletions": 0,
                "changes": 34,
                "blob_url": "https://github.com/scrapy/scrapy/blob/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/scrapy%2Futils%2Fdeprecate.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/scrapy%2Futils%2Fdeprecate.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/scrapy%2Futils%2Fdeprecate.py?ref=d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d",
                "patch": "@@ -121,3 +121,37 @@ def _clspath(cls, forced=None):\n     if forced is not None:\n         return forced\n     return '{}.{}'.format(cls.__module__, cls.__name__)\n+\n+\n+DEPRECATION_RULES = [\n+    ('scrapy.contrib_exp.downloadermiddleware.decompression.', 'scrapy.downloadermiddlewares.decompression.'),\n+    ('scrapy.contrib_exp.iterators.', 'scrapy.utils.iterators.'),\n+    ('scrapy.contrib.downloadermiddleware.', 'scrapy.downloadermiddlewares.'),\n+    ('scrapy.contrib.exporter.', 'scrapy.exporters.'),\n+    ('scrapy.contrib.linkextractors.', 'scrapy.linkextractors.'),\n+    ('scrapy.contrib.loader.processor.', 'scrapy.loader.processors.'),\n+    ('scrapy.contrib.loader.', 'scrapy.loader.'),\n+    ('scrapy.contrib.pipeline.', 'scrapy.pipelines.'),\n+    ('scrapy.contrib.spidermiddleware.', 'scrapy.spidermiddlewares.'),\n+    ('scrapy.contrib.spiders.', 'scrapy.spiders.'),\n+    ('scrapy.contrib.', 'scrapy.extensions.'),\n+    ('scrapy.command.', 'scrapy.commands.'),\n+    ('scrapy.dupefilter.', 'scrapy.dupefilters.'),\n+    ('scrapy.linkextractor.', 'scrapy.linkextractors.'),\n+    ('scrapy.spider.', 'scrapy.spiders.'),\n+    ('scrapy.squeue.', 'scrapy.squeues.'),\n+    ('scrapy.statscol.', 'scrapy.statscollectors.'),\n+    ('scrapy.utils.decorator.', 'scrapy.utils.decorators.'),\n+    ('scrapy.spidermanager.SpiderManager', 'scrapy.spiderloader.SpiderLoader'),\n+]\n+\n+\n+def update_classpath(path):\n+    \"\"\"Update a deprecated path from an object with its new location\"\"\"\n+    for prefix, replacement in DEPRECATION_RULES:\n+        if path.startswith(prefix):\n+            new_path = path.replace(prefix, replacement, 1)\n+            warnings.warn(\"`{}` class is deprecated, use `{}` instead\".format(path, new_path),\n+                          ScrapyDeprecationWarning)\n+            return new_path\n+    return path"
              }
            ],
            "tests": [
              {
                "sha": "177d024fb574f3583ef9ff3541407ecb99e4c5a9",
                "filename": "tests/test_utils_conf.py",
                "status": "modified",
                "additions": 29,
                "deletions": 4,
                "changes": 33,
                "blob_url": "https://github.com/scrapy/scrapy/blob/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/tests%2Ftest_utils_conf.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/tests%2Ftest_utils_conf.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/tests%2Ftest_utils_conf.py?ref=d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d",
                "patch": "@@ -2,16 +2,41 @@\n \n from scrapy.utils.conf import build_component_list, arglist_to_dict\n \n-class UtilsConfTestCase(unittest.TestCase):\n \n-    def test_build_component_list(self):\n+class BuildComponentListTest(unittest.TestCase):\n+\n+    def test_build_dict(self):\n         base = {'one': 1, 'two': 2, 'three': 3, 'five': 5, 'six': None}\n         custom = {'two': None, 'three': 8, 'four': 4}\n-        self.assertEqual(build_component_list(base, custom),\n+        self.assertEqual(build_component_list(base, custom, lambda x: x),\n                          ['one', 'four', 'five', 'three'])\n \n+    def test_return_list(self):\n+        custom = ['a', 'b', 'c']\n+        self.assertEqual(build_component_list(None, custom, lambda x: x),\n+                         custom)\n+\n+    def test_map_dict(self):\n+        custom = {'one': 1, 'two': 2, 'three': 3}\n+        self.assertEqual(build_component_list({}, custom, lambda x: x.upper()),\n+                         ['ONE', 'TWO', 'THREE'])\n+\n+    def test_map_list(self):\n         custom = ['a', 'b', 'c']\n-        self.assertEqual(build_component_list(base, custom), custom)\n+        self.assertEqual(build_component_list(None, custom, lambda x: x.upper()),\n+                         ['A', 'B', 'C'])\n+\n+    def test_duplicate_components_in_dict(self):\n+        duplicate_dict = {'one': 1, 'two': 2, 'ONE': 4}\n+        self.assertRaises(ValueError,\n+                          build_component_list, {}, duplicate_dict, lambda x: x.lower())\n+\n+    def test_duplicate_components_in_list(self):\n+        duplicate_list = ['a', 'b', 'a']\n+        self.assertRaises(ValueError,\n+                          build_component_list, None, duplicate_list, lambda x: x)\n+\n+class UtilsConfTestCase(unittest.TestCase):\n \n     def test_arglist_to_dict(self):\n         self.assertEqual(arglist_to_dict(['arg1=val1', 'arg2=val2']),"
              },
              {
                "sha": "41b8100d76ec7c019e7662a61cdb02f7a069bd29",
                "filename": "tests/test_utils_deprecate.py",
                "status": "modified",
                "additions": 26,
                "deletions": 1,
                "changes": 27,
                "blob_url": "https://github.com/scrapy/scrapy/blob/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/tests%2Ftest_utils_deprecate.py",
                "raw_url": "https://github.com/scrapy/scrapy/raw/d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d/tests%2Ftest_utils_deprecate.py",
                "contents_url": "https://api.github.com/repos/scrapy/scrapy/contents/tests%2Ftest_utils_deprecate.py?ref=d52cf8bb036ce2dc6cfbe63f78cfd172cc7c888d",
                "patch": "@@ -3,7 +3,7 @@\n import inspect\n import unittest\n import warnings\n-from scrapy.utils.deprecate import create_deprecated_class\n+from scrapy.utils.deprecate import create_deprecated_class, update_classpath\n \n from tests import mock\n \n@@ -248,3 +248,28 @@ class SubClass(DeprecatedName):\n                     pass\n \n         self.assertIn(\"Error detecting parent module\", str(w[0].message))\n+\n+\n+@mock.patch('scrapy.utils.deprecate.DEPRECATION_RULES',\n+            [('scrapy.contrib.pipeline.', 'scrapy.pipelines.'),\n+             ('scrapy.contrib.', 'scrapy.extensions.')])\n+class UpdateClassPathTest(unittest.TestCase):\n+\n+    def test_old_path_gets_fixed(self):\n+        with warnings.catch_warnings(record=True) as w:\n+            output = update_classpath('scrapy.contrib.debug.Debug')\n+        self.assertEqual(output, 'scrapy.extensions.debug.Debug')\n+        self.assertEqual(len(w), 1)\n+        self.assertIn(\"scrapy.contrib.debug.Debug\", str(w[0].message))\n+        self.assertIn(\"scrapy.extensions.debug.Debug\", str(w[0].message))\n+\n+    def test_sorted_replacement(self):\n+        with warnings.catch_warnings(record=True):\n+            output = update_classpath('scrapy.contrib.pipeline.Pipeline')\n+        self.assertEqual(output, 'scrapy.pipelines.Pipeline')\n+\n+    def test_unmatched_path_stays_the_same(self):\n+        with warnings.catch_warnings(record=True) as w:\n+            output = update_classpath('scrapy.unmatched.Path')\n+        self.assertEqual(output, 'scrapy.unmatched.Path')\n+        self.assertEqual(len(w), 0)"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "installSteps": "pipenv --python 3.8\npipenv install pytest\npipenv install twisted[tls]\npipenv install -r requirements.txt\npipenv install .",
      "testSteps": "pipenv run pytest tests/test_utils_conf.py\npipenv run pytest tests/test_utils_deprecate.py"
    }
  ],
  "installSteps": "pipenv --python 3.8\npipenv install pytest\npipenv install twisted[tls]\npipenv install -r requirements-py3.txt\npipenv install ."
},
{
  "_id": "64b4f2999d05145a3db52b14",
  "username": "Rapptz",
  "repository": "discord.py",
  "issues": [
    {
      "id": 7818,
      "created_at": "2022-04-01T11:44:03Z",
      "closed_at": "2022-04-01T13:14:02Z",
      "title": "Unable to create nested groups with explicit parent set",
      "labels": "bug",
      "text_based": false,
      "commits": [
        {
          "hash": "25ad5b675c044e67c160e8a18a4753e93efec26d",
          "commit_date": "2022-04-01T13:13:27Z",
          "parents": "c67130821151266e6b6855b8ce0e031850bf6fbc",
          "stat": {
            "total": 4,
            "additions": 50,
            "deletions": 46,
            "files": [
              {
                "sha": "11af21f8fc3623e5c6e3d318fb9144a0ee34f0b5",
                "filename": "discord/app_commands/commands.py",
                "status": "modified",
                "additions": 13,
                "deletions": 2,
                "changes": 15,
                "blob_url": "https://github.com/Rapptz/discord.py/blob/25ad5b675c044e67c160e8a18a4753e93efec26d/discord%2Fapp_commands%2Fcommands.py",
                "raw_url": "https://github.com/Rapptz/discord.py/raw/25ad5b675c044e67c160e8a18a4753e93efec26d/discord%2Fapp_commands%2Fcommands.py",
                "contents_url": "https://api.github.com/repos/Rapptz/discord.py/contents/discord%2Fapp_commands%2Fcommands.py?ref=25ad5b675c044e67c160e8a18a4753e93efec26d",
                "patch": "@@ -971,6 +971,7 @@ def __init__(\n         self.name: str = validate_name(name) if name is not MISSING else cls.__discord_app_commands_group_name__\n         self.description: str = description or cls.__discord_app_commands_group_description__\n         self._attr: Optional[str] = None\n+        self._owner_cls: Optional[Type[Any]] = None\n         self._guild_ids: Optional[List[int]] = guild_ids\n \n         if not self.description:\n@@ -1004,12 +1005,15 @@ def __init__(\n             if copy._attr and not cls.__discord_app_commands_skip_init_binding__:\n                 setattr(self, copy._attr, copy)\n \n-        if parent is not None and parent.parent is not None:\n-            raise ValueError('groups can only be nested at most one level')\n+        if parent is not None:\n+            if parent.parent is not None:\n+                raise ValueError('groups can only be nested at most one level')\n+            parent.add_command(self)\n \n     def __set_name__(self, owner: Type[Any], name: str) -> None:\n         self._attr = name\n         self.module = owner.__module__\n+        self._owner_cls = owner\n \n     def _copy_with(\n         self,\n@@ -1029,6 +1033,7 @@ def _copy_with(\n         copy.parent = parent\n         copy.module = self.module\n         copy._attr = self._attr\n+        copy._owner_cls = self._owner_cls\n         copy._children = {}\n \n         bindings[self] = copy\n@@ -1038,6 +1043,12 @@ def _copy_with(\n             child_copy.parent = copy\n             copy._children[child_copy.name] = child_copy\n \n+            if isinstance(child_copy, Group) and child_copy._attr and set_on_binding:\n+                if binding.__class__ is child_copy._owner_cls:\n+                    setattr(binding, child_copy._attr, child_copy)\n+                elif child_copy._owner_cls is copy.__class__:\n+                    setattr(copy, child_copy._attr, child_copy)\n+\n         if copy._attr and set_on_binding:\n             setattr(parent or binding, copy._attr, copy)\n "
              }
            ],
            "tests": [
              {
                "sha": "827c38d5d5e8a7c1d80e6ab175f0f29b21b2f99d",
                "filename": "tests/test_app_commands_group.py",
                "status": "modified",
                "additions": 33,
                "deletions": 2,
                "changes": 35,
                "blob_url": "https://github.com/Rapptz/discord.py/blob/25ad5b675c044e67c160e8a18a4753e93efec26d/tests%2Ftest_app_commands_group.py",
                "raw_url": "https://github.com/Rapptz/discord.py/raw/25ad5b675c044e67c160e8a18a4753e93efec26d/tests%2Ftest_app_commands_group.py",
                "contents_url": "https://api.github.com/repos/Rapptz/discord.py/contents/tests%2Ftest_app_commands_group.py?ref=25ad5b675c044e67c160e8a18a4753e93efec26d",
                "patch": "@@ -95,8 +95,7 @@ async def my_group_command(self, interaction: discord.Interaction) -> None:\n     assert my_group.my_group_command.parent is my_group\n     assert my_group.my_group_command.binding is my_group\n     assert my_group.sub_group.my_sub_group_command.parent is my_group.sub_group\n-    print(my_group.sub_group.my_sub_group_command.binding)\n-    print(MyGroup.sub_group)\n+    assert not hasattr(my_group, 'my_sub_group_command')\n     assert my_group.sub_group.my_sub_group_command.binding is my_group.sub_group\n \n \n@@ -127,6 +126,32 @@ async def my_command(self, interaction: discord.Interaction) -> None:\n     assert cog.my_command.binding is cog\n \n \n+def test_cog_with_nested_group_with_commands():\n+    class MyCog(commands.Cog):\n+        first = app_commands.Group(name='test', description='Test 1')\n+        second = app_commands.Group(name='test2', parent=first, description='Test 2')\n+\n+        @first.command(name='cmd')\n+        async def test_cmd(self, interaction: discord.Interaction) -> None:\n+            ...\n+\n+        @second.command(name='cmd2')\n+        async def test2_cmd(self, interaction: discord.Interaction) -> None:\n+            ...\n+\n+    cog = MyCog()\n+\n+    assert len(MyCog.__cog_app_commands__) == 1\n+    assert cog.first.parent is None\n+    assert cog.first is not MyCog.first\n+    assert cog.second is not MyCog.second\n+    assert cog.second.parent is cog.first\n+    assert cog.test_cmd.parent is cog.first\n+    assert cog.test2_cmd.parent is cog.second\n+    assert cog.test_cmd.binding is cog\n+    assert cog.test2_cmd.binding is cog\n+\n+\n def test_cog_with_group_subclass_with_commands():\n     class MyGroup(app_commands.Group, name='mygroup'):\n         @app_commands.command()\n@@ -175,6 +200,8 @@ async def my_cog_command(self, interaction: discord.Interaction) -> None:\n     assert cog.my_group.my_command is not MyGroup.my_command\n     assert cog.my_cog_command is not MyCog.my_cog_command\n     assert not hasattr(cog.my_group, 'my_cog_command')\n+    assert not hasattr(cog, 'sub_group')\n+    assert not hasattr(cog, 'my_command')\n     assert cog.my_group.parent is None\n     assert cog.my_group.sub_group.parent is cog.my_group\n     assert cog.my_group.my_command.parent is cog.my_group.sub_group\n@@ -215,6 +242,10 @@ async def my_sub_group_cog_command(self, interaction: discord.Interaction) -> No\n     assert cog.my_group.sub_group is not MyGroup.sub_group\n     assert cog.my_cog_command is not MyCog.my_cog_command\n     assert not hasattr(cog.my_group, 'my_cog_command')\n+    assert not hasattr(cog, 'sub_group')\n+    assert not hasattr(cog, 'my_group_command')\n+    assert not hasattr(cog, 'my_sub_group_command')\n+    assert not hasattr(cog.my_group, 'my_sub_group_command')\n     assert cog.my_group.sub_group.my_sub_group_command is not MyGroup.sub_group.my_sub_group_command\n     assert cog.my_group.sub_group.my_sub_group_command is not MySubGroup.my_sub_group_command\n     assert cog.my_group.sub_group.parent is cog.my_group"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "pipenv run pytest -- tests/test_app_commands_group.py",
      "testStepsFull": "pipenv run pytest"
    },
    {
      "id": 7676,
      "created_at": "2022-03-13T18:22:23Z",
      "closed_at": "2022-03-14T10:09:27Z",
      "title": "tasks.loop display too many warning.",
      "labels": "bug",
      "text_based": false,
      "commits": [
        {
          "hash": "abcec5da9d501a1b54b73ac0fa3870df773fa63c",
          "commit_date": "2022-03-14T08:54:56Z",
          "parents": "a4676804ec15d3a9c67a76563918f866cf1b49b9",
          "stat": {
            "total": 7,
            "additions": 46,
            "deletions": 39,
            "files": [
              {
                "sha": "93f6969b8c890537b7c0efce722e36c4ada60b35",
                "filename": "discord/ext/tasks/__init__.py",
                "status": "modified",
                "additions": 13,
                "deletions": 6,
                "changes": 19,
                "blob_url": "https://github.com/Rapptz/discord.py/blob/abcec5da9d501a1b54b73ac0fa3870df773fa63c/discord%2Fext%2Ftasks%2F__init__.py",
                "raw_url": "https://github.com/Rapptz/discord.py/raw/abcec5da9d501a1b54b73ac0fa3870df773fa63c/discord%2Fext%2Ftasks%2F__init__.py",
                "contents_url": "https://api.github.com/repos/Rapptz/discord.py/contents/discord%2Fext%2Ftasks%2F__init__.py?ref=abcec5da9d501a1b54b73ac0fa3870df773fa63c",
                "patch": "@@ -632,13 +632,14 @@ def _get_next_sleep_time(self, now: datetime.datetime = MISSING) -> datetime.dat\n \n         if index is None:\n             time = self._time[0]\n-            tomorrow = now + datetime.timedelta(days=1)\n+            tomorrow = now.astimezone(time.tzinfo) + datetime.timedelta(days=1)\n             date = tomorrow.date()\n         else:\n-            date = now.date()\n             time = self._time[index]\n+            date = now.astimezone(time.tzinfo).date()\n \n-        return resolve_datetime(datetime.datetime.combine(date, time, tzinfo=time.tzinfo or datetime.timezone.utc))\n+        dt = datetime.datetime.combine(date, time, tzinfo=time.tzinfo)\n+        return resolve_datetime(dt)\n \n     def _start_time_relative_to(self, now: datetime.datetime) -> Optional[int]:\n         # now kwarg should be a datetime.datetime representing the time \"now\"\n@@ -651,10 +652,16 @@ def _start_time_relative_to(self, now: datetime.datetime) -> Optional[int]:\n         # For example, if given a list of times [0, 3, 18]\n         # If it's 04:00 today then we know we have to wait until 18:00 today\n         # If it's 19:00 today then we know we we have to wait until 00:00 tomorrow\n-        date = now.date()\n+        # Note that timezones need to be taken into consideration for this to work.\n+        # If the timezone is set to UTC+9 and the now timezone is UTC\n+        # A conversion needs to be done.\n+        # i.e. 03:00 UTC+9 -> 18:00 UTC the previous day\n         for idx, time in enumerate(self._time):\n-            start_time = datetime.datetime.combine(date, time, tzinfo=time.tzinfo)\n-            if start_time >= now:\n+            # Convert the current time to the target timezone\n+            # e.g. 18:00 UTC -> 03:00 UTC+9\n+            # Then compare the time instances to see if they're the same\n+            start = now.astimezone(time.tzinfo)\n+            if time >= start.timetz():\n                 return idx\n         else:\n             return None"
              }
            ],
            "tests": [
              {
                "sha": "04e0c7ea6e857029f22056dbee7f159e8d0c6d58",
                "filename": "tests/test_ext_tasks.py",
                "status": "modified",
                "additions": 26,
                "deletions": 1,
                "changes": 27,
                "blob_url": "https://github.com/Rapptz/discord.py/blob/abcec5da9d501a1b54b73ac0fa3870df773fa63c/tests%2Ftest_ext_tasks.py",
                "raw_url": "https://github.com/Rapptz/discord.py/raw/abcec5da9d501a1b54b73ac0fa3870df773fa63c/tests%2Ftest_ext_tasks.py",
                "contents_url": "https://api.github.com/repos/Rapptz/discord.py/contents/tests%2Ftest_ext_tasks.py?ref=abcec5da9d501a1b54b73ac0fa3870df773fa63c",
                "patch": "@@ -102,7 +102,32 @@ async def loop():\n \n     for before, expected_time in zip(minute_before, times):\n         expected = datetime.datetime.combine(today, expected_time, tzinfo=jst)\n-        assert loop._get_next_sleep_time(before) == expected\n+        actual = loop._get_next_sleep_time(before)\n+        assert actual == expected\n+\n+\n+def test_task_regression_issue7676():\n+    jst = datetime.timezone(datetime.timedelta(hours=9))\n+\n+    # 00:00, 03:00, 06:00, 09:00, 12:00, 15:00, 18:00, 21:00\n+    times = [datetime.time(hour=h, tzinfo=jst) for h in range(0, 24, 3)]\n+\n+    @tasks.loop(time=times)\n+    async def loop():\n+        pass\n+\n+    # Create pseudo UTC times\n+    now = utils.utcnow()\n+    today = now.date()\n+    times_before_in_utc = [\n+        datetime.datetime.combine(today, time, tzinfo=jst).astimezone(datetime.timezone.utc) - datetime.timedelta(minutes=1)\n+        for time in times\n+    ]\n+\n+    for before, expected_time in zip(times_before_in_utc, times):\n+        actual = loop._get_next_sleep_time(before)\n+        actual_time = actual.timetz()\n+        assert actual_time == expected_time\n \n \n @pytest.mark.skipif(sys.version_info < (3, 9), reason=\"zoneinfo requires 3.9\")"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "pipenv run pytest -- tests/test_ext_tasks.py",
      "testStepsFull": "pipenv run pytest"
    }
  ],
  "installSteps": "pipenv --python 3.8\npipenv run python -m pip install -e .[test]"
},
{
  "_id": "64b7e33ceb69ce1fbc9d944c",
  "username": "python-poetry",
  "repository": "poetry",
  "issues": [
    {
      "id": 5141,
      "created_at": "2022-02-02T19:29:48Z",
      "closed_at": "2022-04-03T17:46:14Z",
      "title": "Incorrect `poetry export` output with dependency conditional on Python version",
      "labels": "kind/bug",
      "text_based": false,
      "commits": [
        {
          "hash": "fb13b3a676f476177f7937ffa480ee5cff9a90a5",
          "commit_date": "2022-04-03T17:46:12Z",
          "parents": "eb27f816f643c905eb8e8086691454d4490e3dfe",
          "stat": {
            "total": 193,
            "additions": 779,
            "deletions": 586,
            "files": [
              {
                "sha": "46eae599982083d02aa5d5d7fc43df87dddeb139",
                "filename": "src/poetry/packages/locker.py",
                "status": "modified",
                "additions": 78,
                "deletions": 104,
                "changes": 182,
                "blob_url": "https://github.com/python-poetry/poetry/blob/fb13b3a676f476177f7937ffa480ee5cff9a90a5/src%2Fpoetry%2Fpackages%2Flocker.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/fb13b3a676f476177f7937ffa480ee5cff9a90a5/src%2Fpoetry%2Fpackages%2Flocker.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/src%2Fpoetry%2Fpackages%2Flocker.py?ref=fb13b3a676f476177f7937ffa480ee5cff9a90a5",
                "patch": "@@ -32,6 +32,8 @@\n \n \n if TYPE_CHECKING:\n+    from poetry.core.semver.version_constraint import VersionConstraint\n+    from poetry.core.version.markers import BaseMarker\n     from tomlkit.items import InlineTable\n     from tomlkit.toml_document import TOMLDocument\n \n@@ -203,152 +205,130 @@ def locked_repository(self, with_dev_reqs: bool = False) -> Repository:\n \n     @staticmethod\n     def __get_locked_package(\n-        _dependency: Dependency, packages_by_name: dict[str, list[Package]]\n+        dependency: Dependency,\n+        packages_by_name: dict[str, list[Package]],\n+        decided: dict[Package, Dependency] | None = None,\n     ) -> Package | None:\n         \"\"\"\n         Internal helper to identify corresponding locked package using dependency\n         version constraints.\n         \"\"\"\n-        for _package in packages_by_name.get(_dependency.name, []):\n-            if _dependency.constraint.allows(_package.version):\n-                return _package\n-        return None\n+        decided = decided or {}\n+\n+        # Get the packages that are consistent with this dependency.\n+        packages = [\n+            package\n+            for package in packages_by_name.get(dependency.name, [])\n+            if package.python_constraint.allows_all(dependency.python_constraint)\n+            and dependency.constraint.allows(package.version)\n+        ]\n+\n+        # If we've previously made a choice that is compatible with the current\n+        # requirement, stick with it.\n+        for package in packages:\n+            old_decision = decided.get(package)\n+            if (\n+                old_decision is not None\n+                and not old_decision.marker.intersect(dependency.marker).is_empty()\n+            ):\n+                return package\n+\n+        return next(iter(packages), None)\n \n     @classmethod\n-    def __walk_dependency_level(\n+    def __walk_dependencies(\n         cls,\n         dependencies: list[Dependency],\n-        level: int,\n-        pinned_versions: bool,\n         packages_by_name: dict[str, list[Package]],\n-        project_level_dependencies: set[str],\n-        nested_dependencies: dict[tuple[str, str], Dependency],\n-    ) -> dict[tuple[str, str], Dependency]:\n-        if not dependencies:\n-            return nested_dependencies\n-\n-        next_level_dependencies = []\n+    ) -> dict[Package, Dependency]:\n+        nested_dependencies: dict[Package, Dependency] = {}\n \n-        for requirement in dependencies:\n-            key = (requirement.name, requirement.pretty_constraint)\n-            locked_package = cls.__get_locked_package(requirement, packages_by_name)\n-\n-            if locked_package:\n-                # create dependency from locked package to retain dependency metadata\n-                # if this is not done, we can end-up with incorrect nested dependencies\n-                constraint = requirement.constraint\n-                pretty_constraint = requirement.pretty_constraint\n-                marker = requirement.marker\n-                requirement = locked_package.to_dependency()\n-                requirement.marker = requirement.marker.intersect(marker)\n-\n-                key = (requirement.name, pretty_constraint)\n+        visited: set[tuple[Dependency, BaseMarker]] = set()\n+        while dependencies:\n+            requirement = dependencies.pop(0)\n+            if (requirement, requirement.marker) in visited:\n+                continue\n+            visited.add((requirement, requirement.marker))\n \n-                if not pinned_versions:\n-                    requirement.set_constraint(constraint)\n+            locked_package = cls.__get_locked_package(\n+                requirement, packages_by_name, nested_dependencies\n+            )\n \n-                for require in locked_package.requires:\n-                    if require.marker.is_empty():\n-                        require.marker = requirement.marker\n-                    else:\n-                        require.marker = require.marker.intersect(requirement.marker)\n+            if not locked_package:\n+                raise RuntimeError(f\"Dependency walk failed at {requirement}\")\n \n-                    require.marker = require.marker.intersect(locked_package.marker)\n+            # create dependency from locked package to retain dependency metadata\n+            # if this is not done, we can end-up with incorrect nested dependencies\n+            constraint = requirement.constraint\n+            marker = requirement.marker\n+            extras = requirement.extras\n+            requirement = locked_package.to_dependency()\n+            requirement.marker = requirement.marker.intersect(marker)\n \n-                    if key not in nested_dependencies:\n-                        next_level_dependencies.append(require)\n+            requirement.set_constraint(constraint)\n \n-            if requirement.name in project_level_dependencies and level == 0:\n-                # project level dependencies take precedence\n-                continue\n+            for require in locked_package.requires:\n+                if require.in_extras and extras.isdisjoint(require.in_extras):\n+                    continue\n \n-            if not locked_package:\n-                # we make a copy to avoid any side-effects\n-                requirement = deepcopy(requirement)\n+                require = deepcopy(require)\n+                require.marker = require.marker.intersect(\n+                    requirement.marker.without_extras()\n+                )\n+                if not require.marker.is_empty():\n+                    dependencies.append(require)\n \n+            key = locked_package\n             if key not in nested_dependencies:\n                 nested_dependencies[key] = requirement\n             else:\n                 nested_dependencies[key].marker = nested_dependencies[key].marker.union(\n                     requirement.marker\n                 )\n \n-        return cls.__walk_dependency_level(\n-            dependencies=next_level_dependencies,\n-            level=level + 1,\n-            pinned_versions=pinned_versions,\n-            packages_by_name=packages_by_name,\n-            project_level_dependencies=project_level_dependencies,\n-            nested_dependencies=nested_dependencies,\n-        )\n+        return nested_dependencies\n \n     @classmethod\n     def get_project_dependencies(\n         cls,\n         project_requires: list[Dependency],\n         locked_packages: list[Package],\n-        pinned_versions: bool = False,\n-        with_nested: bool = False,\n-    ) -> Iterable[Dependency]:\n+    ) -> Iterable[tuple[Package, Dependency]]:\n         # group packages entries by name, this is required because requirement might use\n-        # different constraints\n+        # different constraints.\n         packages_by_name: dict[str, list[Package]] = {}\n         for pkg in locked_packages:\n             if pkg.name not in packages_by_name:\n                 packages_by_name[pkg.name] = []\n             packages_by_name[pkg.name].append(pkg)\n \n-        project_level_dependencies = set()\n-        dependencies = []\n-\n-        for dependency in project_requires:\n-            dependency = deepcopy(dependency)\n-            locked_package = cls.__get_locked_package(dependency, packages_by_name)\n-            if locked_package:\n-                locked_dependency = locked_package.to_dependency()\n-                locked_dependency.marker = dependency.marker.intersect(\n-                    locked_package.marker\n-                )\n-\n-                if not pinned_versions:\n-                    locked_dependency.set_constraint(dependency.constraint)\n-\n-                dependency = locked_dependency\n-\n-            project_level_dependencies.add(dependency.name)\n-            dependencies.append(dependency)\n-\n-        if not with_nested:\n-            # return only with project level dependencies\n-            return dependencies\n+        # Put higher versions first so that we prefer them.\n+        for packages in packages_by_name.values():\n+            packages.sort(key=lambda package: package.version, reverse=True)\n \n-        nested_dependencies = cls.__walk_dependency_level(\n-            dependencies=dependencies,\n-            level=0,\n-            pinned_versions=pinned_versions,\n+        nested_dependencies = cls.__walk_dependencies(\n+            dependencies=project_requires,\n             packages_by_name=packages_by_name,\n-            project_level_dependencies=project_level_dependencies,\n-            nested_dependencies={},\n         )\n \n-        # Merge same dependencies using marker union\n-        for requirement in dependencies:\n-            key = (requirement.name, requirement.pretty_constraint)\n-            if key not in nested_dependencies:\n-                nested_dependencies[key] = requirement\n-            else:\n-                nested_dependencies[key].marker = nested_dependencies[key].marker.union(\n-                    requirement.marker\n-                )\n-\n-        return sorted(nested_dependencies.values(), key=lambda x: x.name.lower())\n+        return nested_dependencies.items()\n \n     def get_project_dependency_packages(\n         self,\n         project_requires: list[Dependency],\n+        project_python_marker: VersionConstraint | None = None,\n         dev: bool = False,\n         extras: bool | Sequence[str] | None = None,\n     ) -> Iterator[DependencyPackage]:\n+        # Apply the project python marker to all requirements.\n+        if project_python_marker is not None:\n+            marked_requires: list[Dependency] = []\n+            for require in project_requires:\n+                require = deepcopy(require)\n+                require.marker = require.marker.intersect(project_python_marker)\n+                marked_requires.append(require)\n+            project_requires = marked_requires\n+\n         repository = self.locked_repository(with_dev_reqs=dev)\n \n         # Build a set of all packages required by our selected extras\n@@ -379,16 +359,10 @@ def get_project_dependency_packages(\n \n             selected.append(dependency)\n \n-        for dependency in self.get_project_dependencies(\n+        for package, dependency in self.get_project_dependencies(\n             project_requires=selected,\n             locked_packages=repository.packages,\n-            with_nested=True,\n         ):\n-            try:\n-                package = repository.find_packages(dependency=dependency)[0]\n-            except IndexError:\n-                continue\n-\n             for extra in dependency.extras:\n                 package.requires_extras.append(extra)\n "
              },
              {
                "sha": "c219a8b85222e626ba52841801eb05b4e3543210",
                "filename": "src/poetry/utils/exporter.py",
                "status": "modified",
                "additions": 14,
                "deletions": 14,
                "changes": 28,
                "blob_url": "https://github.com/python-poetry/poetry/blob/fb13b3a676f476177f7937ffa480ee5cff9a90a5/src%2Fpoetry%2Futils%2Fexporter.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/fb13b3a676f476177f7937ffa480ee5cff9a90a5/src%2Fpoetry%2Futils%2Fexporter.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/src%2Fpoetry%2Futils%2Fexporter.py?ref=fb13b3a676f476177f7937ffa480ee5cff9a90a5",
                "patch": "@@ -1,6 +1,5 @@\n from __future__ import annotations\n \n-import itertools\n import urllib.parse\n \n from typing import TYPE_CHECKING\n@@ -70,21 +69,22 @@ def _export_requirements_txt(\n         content = \"\"\n         dependency_lines = set()\n \n-        for package, groups in itertools.groupby(\n-            self._poetry.locker.get_project_dependency_packages(\n-                project_requires=self._poetry.package.all_requires,\n-                dev=dev,\n-                extras=extras,\n-            ),\n-            lambda dependency_package: dependency_package.package,\n+        # Get project dependencies.\n+        root_package = (\n+            self._poetry.package.clone()\n+            if dev\n+            else self._poetry.package.with_dependency_groups([\"default\"], only=True)\n+        )\n+\n+        for dependency_package in self._poetry.locker.get_project_dependency_packages(\n+            project_requires=root_package.all_requires,\n+            project_python_marker=root_package.python_marker,\n+            dev=dev,\n+            extras=extras,\n         ):\n             line = \"\"\n-            dependency_packages = list(groups)\n-            dependency = dependency_packages[0].dependency\n-            marker = dependency.marker\n-            for dep_package in dependency_packages[1:]:\n-                marker = marker.union(dep_package.dependency.marker)\n-            dependency.marker = marker\n+            dependency = dependency_package.dependency\n+            package = dependency_package.package\n \n             if package.develop:\n                 line += \"-e \""
              }
            ],
            "tests": [
              {
                "sha": "6e704b5338a49329e1ea321e67fe8e631b8a1bfe",
                "filename": "tests/console/commands/test_export.py",
                "status": "modified",
                "additions": 15,
                "deletions": 5,
                "changes": 20,
                "blob_url": "https://github.com/python-poetry/poetry/blob/fb13b3a676f476177f7937ffa480ee5cff9a90a5/tests%2Fconsole%2Fcommands%2Ftest_export.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/fb13b3a676f476177f7937ffa480ee5cff9a90a5/tests%2Fconsole%2Fcommands%2Ftest_export.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Fconsole%2Fcommands%2Ftest_export.py?ref=fb13b3a676f476177f7937ffa480ee5cff9a90a5",
                "patch": "@@ -84,7 +84,9 @@ def _export_requirements(tester: CommandTester, poetry: Poetry) -> None:\n     assert poetry.locker.lock.exists()\n \n     expected = \"\"\"\\\n-foo==1.0.0\n+foo==1.0.0 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.4\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -113,7 +115,9 @@ def test_export_fails_on_invalid_format(tester: CommandTester, do_lock: None):\n def test_export_prints_to_stdout_by_default(tester: CommandTester, do_lock: None):\n     tester.execute(\"--format requirements.txt\")\n     expected = \"\"\"\\\n-foo==1.0.0\n+foo==1.0.0 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.4\" and python_version < \"4.0\"\n \"\"\"\n     assert tester.io.fetch_output() == expected\n \n@@ -123,16 +127,22 @@ def test_export_uses_requirements_txt_format_by_default(\n ):\n     tester.execute()\n     expected = \"\"\"\\\n-foo==1.0.0\n+foo==1.0.0 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.4\" and python_version < \"4.0\"\n \"\"\"\n     assert tester.io.fetch_output() == expected\n \n \n def test_export_includes_extras_by_flag(tester: CommandTester, do_lock: None):\n     tester.execute(\"--format requirements.txt --extras feature_bar\")\n     expected = \"\"\"\\\n-bar==1.1.0\n-foo==1.0.0\n+bar==1.1.0 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.4\" and python_version < \"4.0\"\n+foo==1.0.0 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.4\" and python_version < \"4.0\"\n \"\"\"\n     assert tester.io.fetch_output() == expected\n "
              },
              {
                "sha": "1c1cd3f97d2ed7a3a5d1f92d752c9181e94ff016",
                "filename": "tests/utils/test_exporter.py",
                "status": "modified",
                "additions": 479,
                "deletions": 70,
                "changes": 549,
                "blob_url": "https://github.com/python-poetry/poetry/blob/fb13b3a676f476177f7937ffa480ee5cff9a90a5/tests%2Futils%2Ftest_exporter.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/fb13b3a676f476177f7937ffa480ee5cff9a90a5/tests%2Futils%2Ftest_exporter.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Futils%2Ftest_exporter.py?ref=fb13b3a676f476177f7937ffa480ee5cff9a90a5",
                "patch": "@@ -1,7 +1,6 @@\n from __future__ import annotations\n \n import sys\n-import textwrap\n \n from pathlib import Path\n from typing import TYPE_CHECKING\n@@ -126,8 +125,12 @@ def test_exporter_can_export_requirements_txt_with_standard_packages(\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6\n-foo==1.2.3\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -181,9 +184,15 @@ def test_exporter_can_export_requirements_txt_with_standard_packages_and_markers\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6\n-baz==7.8.9 ; sys_platform == \"win32\"\n-foo==1.2.3 ; python_version < \"3.7\"\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+baz==7.8.9 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" and sys_platform == \"win32\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" and sys_platform == \"win32\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"3.7\"\n \"\"\"\n \n     assert content == expected\n@@ -286,17 +295,29 @@ def test_exporter_can_export_requirements_txt_poetry(tmp_dir: str, poetry: Poetr\n     # │       ├── cryptography >=2.0\n     # │       │   └── six >=1.4.1\n     # │       └── jeepney >=0.6 (circular dependency aborted here)\n+    python27 = 'python_version >= \"2.7\" and python_version < \"2.8\"'\n+    python36 = 'python_version >= \"3.6\" and python_version < \"4.0\"'\n+    linux = 'sys_platform==\"linux\"'\n     expected = {\n-        \"poetry\": Dependency.create_from_pep_508(\"poetry==1.1.4\"),\n-        \"junit-xml\": Dependency.create_from_pep_508(\"junit-xml==1.9\"),\n-        \"keyring\": Dependency.create_from_pep_508(\"keyring==21.8.0\"),\n+        \"poetry\": Dependency.create_from_pep_508(\n+            f\"poetry==1.1.4; {python27} or {python36}\"\n+        ),\n+        \"junit-xml\": Dependency.create_from_pep_508(\n+            f\"junit-xml==1.9 ; {python27} or {python36}\"\n+        ),\n+        \"keyring\": Dependency.create_from_pep_508(\n+            f\"keyring==21.8.0 ; {python27} or {python36}\"\n+        ),\n         \"secretstorage\": Dependency.create_from_pep_508(\n-            \"secretstorage==3.3.0 ; sys_platform=='linux'\"\n+            f\"secretstorage==3.3.0 ; {python27} and {linux} or {python36} and {linux}\"\n         ),\n         \"cryptography\": Dependency.create_from_pep_508(\n-            \"cryptography==3.2 ; sys_platform=='linux'\"\n+            f\"cryptography==3.2 ; {python27} and {linux} or {python36} and {linux}\"\n+        ),\n+        \"six\": Dependency.create_from_pep_508(\n+            f\"six==1.15.0 ; {python27} or {python36} or {python27} and {linux} or\"\n+            f\" {python36} and {linux}\"\n         ),\n-        \"six\": Dependency.create_from_pep_508(\"six==1.15.0\"),\n     }\n \n     for line in content.strip().split(\"\\n\"):\n@@ -368,11 +389,19 @@ def test_exporter_can_export_requirements_txt_pyinstaller(tmp_dir: str, poetry:\n     # ├── altgraph *      dependencies into a single package.\n     # ├── macholib >=1.8 -- only on Darwin\n     # │   └── altgraph >=0.15\n+    python27 = 'python_version >= \"2.7\" and python_version < \"2.8\"'\n+    python36 = 'python_version >= \"3.6\" and python_version < \"4.0\"'\n+    darwin = 'sys_platform==\"darwin\"'\n     expected = {\n-        \"pyinstaller\": Dependency.create_from_pep_508(\"pyinstaller==4.0\"),\n-        \"altgraph\": Dependency.create_from_pep_508(\"altgraph==0.17\"),\n+        \"pyinstaller\": Dependency.create_from_pep_508(\n+            f\"pyinstaller==4.0 ; {python27} or {python36}\"\n+        ),\n+        \"altgraph\": Dependency.create_from_pep_508(\n+            f\"altgraph==0.17 ; {python27} or {python36} or {python27} and {darwin} or\"\n+            f\" {python36} and {darwin}\"\n+        ),\n         \"macholib\": Dependency.create_from_pep_508(\n-            \"macholib==1.8 ; sys_platform == 'darwin'\"\n+            f\"macholib==1.8 ; {python27} and {darwin} or {python36} and {darwin}\"\n         ),\n     }\n \n@@ -441,17 +470,21 @@ def test_exporter_can_export_requirements_txt_with_nested_packages_and_markers(\n     with (Path(tmp_dir) / \"requirements.txt\").open(encoding=\"utf-8\") as f:\n         content = f.read()\n \n+    python27 = 'python_version >= \"2.7\" and python_version < \"2.8\"'\n+    python36 = 'python_version >= \"3.6\" and python_version < \"3.7\"'\n+    windows = 'platform_system == \"Windows\"'\n+    win32 = 'sys_platform == \"win32\"'\n     expected = {\n-        \"a\": Dependency.create_from_pep_508(\"a==1.2.3 ; python_version < '3.7'\"),\n+        \"a\": Dependency.create_from_pep_508(f\"a==1.2.3 ; {python27} or {python36}\"),\n         \"b\": Dependency.create_from_pep_508(\n-            \"b==4.5.6 ; platform_system == 'Windows' and python_version < '3.7'\"\n+            f\"b==4.5.6 ; {python27} and {windows} or {python36} and {windows}\"\n         ),\n         \"c\": Dependency.create_from_pep_508(\n-            \"c==7.8.9 ; sys_platform == 'win32' and python_version < '3.7'\"\n+            f\"c==7.8.9 ; {python27} and {win32} or {python36} and {win32}\"\n         ),\n         \"d\": Dependency.create_from_pep_508(\n-            \"d==0.0.1 ; platform_system == 'Windows' and python_version < '3.7' or\"\n-            \" sys_platform == 'win32' and python_version < '3.7'\"\n+            f\"d==0.0.1 ; {python27} and {windows} or {python36} and {windows} or\"\n+            f\" {python27} and {win32} or {python36} and {win32}\"\n         ),\n     }\n \n@@ -467,7 +500,25 @@ def test_exporter_can_export_requirements_txt_with_nested_packages_and_markers(\n \n @pytest.mark.parametrize(\n     [\"dev\", \"lines\"],\n-    [(False, ['a==1.2.3 ; python_version < \"3.8\"']), (True, [\"a==1.2.3\", \"b==4.5.6\"])],\n+    [\n+        (\n+            False,\n+            [\n+                'a==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"3.8\"'\n+            ],\n+        ),\n+        (\n+            True,\n+            [\n+                'a==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"3.8\" or python_version'\n+                ' >= \"3.6\" and python_version < \"4.0\"',\n+                'b==4.5.6 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+            ],\n+        ),\n+    ],\n )\n def test_exporter_can_export_requirements_txt_with_nested_packages_and_markers_any(\n     tmp_dir: str, poetry: Poetry, dev: bool, lines: list[str]\n@@ -560,9 +611,13 @@ def test_exporter_can_export_requirements_txt_with_standard_packages_and_hashes(\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -609,8 +664,12 @@ def test_exporter_can_export_requirements_txt_with_standard_packages_and_hashes_\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6\n-foo==1.2.3\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -654,7 +713,9 @@ def test_exporter_exports_requirements_txt_without_dev_packages_by_default(\n         content = f.read()\n \n     expected = \"\"\"\\\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -699,9 +760,13 @@ def test_exporter_exports_requirements_txt_with_dev_packages_if_opted_in(\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -746,7 +811,9 @@ def test_exporter_exports_requirements_txt_without_optional_packages(\n         content = f.read()\n \n     expected = \"\"\"\\\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -756,10 +823,42 @@ def test_exporter_exports_requirements_txt_without_optional_packages(\n @pytest.mark.parametrize(\n     [\"extras\", \"lines\"],\n     [\n-        (None, [\"foo==1.2.3\"]),\n-        (False, [\"foo==1.2.3\"]),\n-        (True, [\"bar==4.5.6\", \"foo==1.2.3\", \"spam==0.1.0\"]),\n-        ([\"feature_bar\"], [\"bar==4.5.6\", \"foo==1.2.3\", \"spam==0.1.0\"]),\n+        (\n+            None,\n+            [\n+                'foo==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"'\n+            ],\n+        ),\n+        (\n+            False,\n+            [\n+                'foo==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"'\n+            ],\n+        ),\n+        (\n+            True,\n+            [\n+                'bar==4.5.6 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'foo==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'spam==0.1.0 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+            ],\n+        ),\n+        (\n+            [\"feature_bar\"],\n+            [\n+                'bar==4.5.6 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'foo==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'spam==0.1.0 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+            ],\n+        ),\n     ],\n )\n def test_exporter_exports_requirements_txt_with_optional_packages(\n@@ -859,7 +958,9 @@ def test_exporter_can_export_requirements_txt_with_git_packages(\n         content = f.read()\n \n     expected = \"\"\"\\\n-foo @ git+https://github.com/foo/foo.git@123456\n+foo @ git+https://github.com/foo/foo.git@123456 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -909,8 +1010,12 @@ def test_exporter_can_export_requirements_txt_with_nested_packages(\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6\n-foo @ git+https://github.com/foo/foo.git@123456\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo @ git+https://github.com/foo/foo.git@123456 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -964,9 +1069,15 @@ def test_exporter_can_export_requirements_txt_with_nested_packages_cyclic(\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6\n-baz==7.8.9\n-foo==1.2.3\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+baz==7.8.9 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -1036,13 +1147,19 @@ def test_exporter_can_export_requirements_txt_with_nested_packages_and_multiple_\n     with (Path(tmp_dir) / \"requirements.txt\").open(encoding=\"utf-8\") as f:\n         content = f.read()\n \n-    expected = textwrap.dedent(\n-        \"\"\"\\\n-        bar==7.8.9\n-        baz==10.11.13 ; platform_system == \"Windows\"\n-        foo==1.2.3\n-        \"\"\"\n-    )\n+    expected = \"\"\"\\\n+bar==7.8.9 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" and platform_system != \"Windows\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" and platform_system != \"Windows\" or\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" and platform_system == \"Windows\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" and platform_system == \"Windows\"\n+baz==10.11.13 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" and platform_system == \"Windows\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" and platform_system == \"Windows\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+\"\"\"\n \n     assert content == expected\n \n@@ -1084,7 +1201,9 @@ def test_exporter_can_export_requirements_txt_with_git_packages_and_markers(\n         content = f.read()\n \n     expected = \"\"\"\\\n-foo @ git+https://github.com/foo/foo.git@123456 ; python_version < \"3.7\"\n+foo @ git+https://github.com/foo/foo.git@123456 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"3.7\"\n \"\"\"\n \n     assert content == expected\n@@ -1126,7 +1245,9 @@ def test_exporter_can_export_requirements_txt_with_directory_packages(\n         content = f.read()\n \n     expected = f\"\"\"\\\n-foo @ {working_directory.as_uri()}/tests/fixtures/sample_project\n+foo @ {working_directory.as_uri()}/tests/fixtures/sample_project ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -1192,9 +1313,15 @@ def test_exporter_can_export_requirements_txt_with_nested_directory_packages(\n         content = f.read()\n \n     expected = f\"\"\"\\\n-bar @ {working_directory.as_uri()}/tests/fixtures/project_with_nested_local/bar\n-baz @ {working_directory.as_uri()}/tests/fixtures/project_with_nested_local\n-foo @ {working_directory.as_uri()}/tests/fixtures/sample_project\n+bar @ {working_directory.as_uri()}/tests/fixtures/project_with_nested_local/bar ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+baz @ {working_directory.as_uri()}/tests/fixtures/project_with_nested_local ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo @ {working_directory.as_uri()}/tests/fixtures/sample_project ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -1237,8 +1364,9 @@ def test_exporter_can_export_requirements_txt_with_directory_packages_and_marker\n         content = f.read()\n \n     expected = f\"\"\"\\\n-foo @ {working_directory.as_uri()}/tests/fixtures/sample_project\\\n- ; python_version < \"3.7\"\n+foo @ {working_directory.as_uri()}/tests/fixtures/sample_project ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"3.7\"\n \"\"\"\n \n     assert content == expected\n@@ -1280,7 +1408,9 @@ def test_exporter_can_export_requirements_txt_with_file_packages(\n         content = f.read()\n \n     expected = f\"\"\"\\\n-foo @ {working_directory.as_uri()}/tests/fixtures/distributions/demo-0.1.0.tar.gz\n+foo @ {working_directory.as_uri()}/tests/fixtures/distributions/demo-0.1.0.tar.gz ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert content == expected\n@@ -1323,8 +1453,9 @@ def test_exporter_can_export_requirements_txt_with_file_packages_and_markers(\n         content = f.read()\n \n     expected = f\"\"\"\\\n-foo @ {working_directory.as_uri()}/tests/fixtures/distributions/demo-0.1.0.tar.gz\\\n- ; python_version < \"3.7\"\n+foo @ {working_directory.as_uri()}/tests/fixtures/distributions/demo-0.1.0.tar.gz ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"3.7\"\n \"\"\"\n \n     assert content == expected\n@@ -1381,9 +1512,13 @@ def test_exporter_exports_requirements_txt_with_legacy_packages(\n     expected = \"\"\"\\\n --extra-index-url https://example.com/simple\n \n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -1439,9 +1574,13 @@ def test_exporter_exports_requirements_txt_with_url_false(tmp_dir: str, poetry:\n         content = f.read()\n \n     expected = \"\"\"\\\n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -1492,7 +1631,9 @@ def test_exporter_exports_requirements_txt_with_legacy_packages_trusted_host(\n --trusted-host example.com\n --extra-index-url http://example.com/simple\n \n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n \"\"\"\n \n@@ -1502,8 +1643,26 @@ def test_exporter_exports_requirements_txt_with_legacy_packages_trusted_host(\n @pytest.mark.parametrize(\n     [\"dev\", \"expected\"],\n     [\n-        (True, [\"bar==1.2.2\", \"baz==1.2.3\", \"foo==1.2.1\"]),\n-        (False, [\"bar==1.2.2\", \"foo==1.2.1\"]),\n+        (\n+            True,\n+            [\n+                'bar==1.2.2 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'baz==1.2.3 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'foo==1.2.1 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+            ],\n+        ),\n+        (\n+            False,\n+            [\n+                'bar==1.2.2 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+                'foo==1.2.1 ; python_version >= \"2.7\" and python_version < \"2.8\" or'\n+                ' python_version >= \"3.6\" and python_version < \"4.0\"',\n+            ],\n+        ),\n     ],\n )\n def test_exporter_exports_requirements_txt_with_dev_extras(\n@@ -1636,11 +1795,17 @@ def test_exporter_exports_requirements_txt_with_legacy_packages_and_duplicate_so\n --extra-index-url https://example.com/simple\n --extra-index-url https://foobaz.com/simple\n \n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-baz==7.8.9 \\\\\n+baz==7.8.9 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:24680\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -1707,9 +1872,13 @@ def test_exporter_exports_requirements_txt_with_legacy_packages_and_credentials(\n     expected = \"\"\"\\\n --extra-index-url https://foo:bar@example.com/simple\n \n-bar==4.5.6 \\\\\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:67890\n-foo==1.2.3 \\\\\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\" \\\\\n     --hash=sha256:12345\n \"\"\"\n \n@@ -1752,8 +1921,248 @@ def test_exporter_exports_requirements_txt_to_standard_output(\n \n     out, err = capsys.readouterr()\n     expected = \"\"\"\\\n-bar==4.5.6\n-foo==1.2.3\n+bar==4.5.6 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+foo==1.2.3 ;\\\n+ python_version >= \"2.7\" and python_version < \"2.8\" or\\\n+ python_version >= \"3.6\" and python_version < \"4.0\"\n+\"\"\"\n+\n+    assert out == expected\n+\n+\n+def test_exporter_doesnt_confuse_repeated_packages(\n+    tmp_dir: str, poetry: Poetry, capsys: CaptureFixture\n+):\n+    # Testcase derived from <https://github.com/python-poetry/poetry/issues/5141>.\n+    poetry.locker.mock_lock_data(\n+        {\n+            \"package\": [\n+                {\n+                    \"name\": \"celery\",\n+                    \"version\": \"5.1.2\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \"<3.7\",\n+                    \"dependencies\": {\n+                        \"click\": \">=7.0,<8.0\",\n+                        \"click-didyoumean\": \">=0.0.3\",\n+                        \"click-plugins\": \">=1.1.1\",\n+                    },\n+                },\n+                {\n+                    \"name\": \"celery\",\n+                    \"version\": \"5.2.3\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \">=3.7\",\n+                    \"dependencies\": {\n+                        \"click\": \">=8.0.3,<9.0\",\n+                        \"click-didyoumean\": \">=0.0.3\",\n+                        \"click-plugins\": \">=1.1.1\",\n+                    },\n+                },\n+                {\n+                    \"name\": \"click\",\n+                    \"version\": \"7.1.2\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": (\n+                        \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\"\n+                    ),\n+                },\n+                {\n+                    \"name\": \"click\",\n+                    \"version\": \"8.0.3\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \">=3.6\",\n+                    \"dependencies\": {},\n+                },\n+                {\n+                    \"name\": \"click-didyoumean\",\n+                    \"version\": \"0.0.3\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \"*\",\n+                    \"dependencies\": {\"click\": \"*\"},\n+                },\n+                {\n+                    \"name\": \"click-didyoumean\",\n+                    \"version\": \"0.3.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \">=3.6.2,<4.0.0\",\n+                    \"dependencies\": {\"click\": \">=7\"},\n+                },\n+                {\n+                    \"name\": \"click-plugins\",\n+                    \"version\": \"1.1.1\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"python-versions\": \"*\",\n+                    \"dependencies\": {\"click\": \">=4.0\"},\n+                },\n+            ],\n+            \"metadata\": {\n+                \"lock-version\": \"1.1\",\n+                \"python-versions\": \"^3.6\",\n+                \"content-hash\": (\n+                    \"832b13a88e5020c27cbcd95faa577bf0dbf054a65c023b45dc9442b640d414e6\"\n+                ),\n+                \"hashes\": {\n+                    \"celery\": [],\n+                    \"click-didyoumean\": [],\n+                    \"click-plugins\": [],\n+                    \"click\": [],\n+                },\n+            },\n+        }\n+    )\n+    root = poetry.package.with_dependency_groups([], only=True)\n+    root.python_versions = \"^3.6\"\n+    root.add_dependency(\n+        Factory.create_dependency(\n+            name=\"celery\", constraint={\"version\": \"5.1.2\", \"python\": \"<3.7\"}\n+        )\n+    )\n+    root.add_dependency(\n+        Factory.create_dependency(\n+            name=\"celery\", constraint={\"version\": \"5.2.3\", \"python\": \">=3.7\"}\n+        )\n+    )\n+    poetry._package = root\n+\n+    exporter = Exporter(poetry)\n+\n+    exporter.export(\"requirements.txt\", Path(tmp_dir), sys.stdout)\n+\n+    out, err = capsys.readouterr()\n+    expected = \"\"\"\\\n+celery==5.1.2 ; python_version >= \"3.6\" and python_version < \"3.7\"\n+celery==5.2.3 ; python_version >= \"3.7\" and python_version < \"4.0\"\n+click-didyoumean==0.0.3 ; python_version >= \"3.6\" and python_version < \"3.7\"\n+click-didyoumean==0.3.0 ; python_version >= \"3.7\" and python_full_version < \"4.0.0\"\n+click-plugins==1.1.1 ;\\\n+ python_version >= \"3.6\" and python_version < \"3.7\" or\\\n+ python_version >= \"3.7\" and python_version < \"4.0\"\n+click==7.1.2 ; python_version >= \"3.6\" and python_version < \"3.7\"\n+click==8.0.3 ;\\\n+ python_version >= \"3.7\" and python_version < \"4.0\" or\\\n+ python_version >= \"3.7\" and python_full_version < \"4.0.0\"\n+\"\"\"\n+\n+    assert out == expected\n+\n+\n+def test_exporter_handles_extras_next_to_non_extras(\n+    tmp_dir: str, poetry: Poetry, capsys: CaptureFixture\n+):\n+    # Testcase similar to the solver testcase added at #5305.\n+    poetry.locker.mock_lock_data(\n+        {\n+            \"package\": [\n+                {\n+                    \"name\": \"localstack\",\n+                    \"python-versions\": \"*\",\n+                    \"version\": \"1.0.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"dependencies\": {\n+                        \"localstack-ext\": [\n+                            {\"version\": \">=1.0.0\"},\n+                            {\n+                                \"version\": \">=1.0.0\",\n+                                \"extras\": [\"bar\"],\n+                                \"markers\": 'extra == \"foo\"',\n+                            },\n+                        ]\n+                    },\n+                    \"extras\": {\"foo\": [\"localstack-ext (>=1.0.0)\"]},\n+                },\n+                {\n+                    \"name\": \"localstack-ext\",\n+                    \"python-versions\": \"*\",\n+                    \"version\": \"1.0.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"dependencies\": {\n+                        \"something\": \"*\",\n+                        \"something-else\": {\n+                            \"version\": \">=1.0.0\",\n+                            \"markers\": 'extra == \"bar\"',\n+                        },\n+                        \"another-thing\": {\n+                            \"version\": \">=1.0.0\",\n+                            \"markers\": 'extra == \"baz\"',\n+                        },\n+                    },\n+                    \"extras\": {\n+                        \"bar\": [\"something-else (>=1.0.0)\"],\n+                        \"baz\": [\"another-thing (>=1.0.0)\"],\n+                    },\n+                },\n+                {\n+                    \"name\": \"something\",\n+                    \"python-versions\": \"*\",\n+                    \"version\": \"1.0.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"dependencies\": {},\n+                },\n+                {\n+                    \"name\": \"something-else\",\n+                    \"python-versions\": \"*\",\n+                    \"version\": \"1.0.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"dependencies\": {},\n+                },\n+                {\n+                    \"name\": \"another-thing\",\n+                    \"python-versions\": \"*\",\n+                    \"version\": \"1.0.0\",\n+                    \"category\": \"main\",\n+                    \"optional\": False,\n+                    \"dependencies\": {},\n+                },\n+            ],\n+            \"metadata\": {\n+                \"lock-version\": \"1.1\",\n+                \"python-versions\": \"^3.6\",\n+                \"content-hash\": (\n+                    \"832b13a88e5020c27cbcd95faa577bf0dbf054a65c023b45dc9442b640d414e6\"\n+                ),\n+                \"hashes\": {\n+                    \"localstack\": [],\n+                    \"localstack-ext\": [],\n+                    \"something\": [],\n+                    \"something-else\": [],\n+                    \"another-thing\": [],\n+                },\n+            },\n+        }\n+    )\n+    root = poetry.package.with_dependency_groups([], only=True)\n+    root.python_versions = \"^3.6\"\n+    root.add_dependency(\n+        Factory.create_dependency(\n+            name=\"localstack\", constraint={\"version\": \"^1.0.0\", \"extras\": [\"foo\"]}\n+        )\n+    )\n+    poetry._package = root\n+\n+    exporter = Exporter(poetry)\n+\n+    exporter.export(\"requirements.txt\", Path(tmp_dir), sys.stdout)\n+\n+    out, err = capsys.readouterr()\n+    expected = \"\"\"\\\n+localstack-ext==1.0.0 ; python_version >= \"3.6\" and python_version < \"4.0\"\n+localstack==1.0.0 ; python_version >= \"3.6\" and python_version < \"4.0\"\n+something-else==1.0.0 ; python_version >= \"3.6\" and python_version < \"4.0\"\n+something==1.0.0 ; python_version >= \"3.6\" and python_version < \"4.0\"\n \"\"\"\n \n     assert out == expected"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "poetry run pytest tests/console/commands/test_export.py\npoetry run pytest tests/utils/test_exporter.py"
    },
    {
      "id": 3303,
      "created_at": "2020-10-28T16:59:37Z",
      "closed_at": "2021-03-25T19:03:47Z",
      "title": "Regression: 403 Auth Failure for S3-hosted (Cloudfront) Private Repos",
      "labels": "kind/bug",
      "text_based": false,
      "commits": [
        {
          "hash": "3c9ced2e12618f9a9946a76c0430b8c80c0d0374",
          "commit_date": "2021-03-25T19:03:45Z",
          "parents": "931cf120c80d1400cd5b9933db7cf078ab3718f4",
          "stat": {
            "total": 15,
            "additions": 28,
            "deletions": 13,
            "files": [
              {
                "sha": "f0551e5adf89a523ea4bf36dfe8f08d614281a46",
                "filename": "poetry/repositories/legacy_repository.py",
                "status": "modified",
                "additions": 6,
                "deletions": 7,
                "changes": 13,
                "blob_url": "https://github.com/python-poetry/poetry/blob/3c9ced2e12618f9a9946a76c0430b8c80c0d0374/poetry%2Frepositories%2Flegacy_repository.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/3c9ced2e12618f9a9946a76c0430b8c80c0d0374/poetry%2Frepositories%2Flegacy_repository.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/poetry%2Frepositories%2Flegacy_repository.py?ref=3c9ced2e12618f9a9946a76c0430b8c80c0d0374",
                "patch": "@@ -423,19 +423,18 @@ def _get(self, endpoint: str) -> Optional[Page]:\n         url = self._url + endpoint\n         try:\n             response = self.session.get(url)\n+            if response.status_code in (401, 403):\n+                self._log(\n+                    \"Authorization error accessing {url}\".format(url=url),\n+                    level=\"warning\",\n+                )\n+                return\n             if response.status_code == 404:\n                 return\n             response.raise_for_status()\n         except requests.HTTPError as e:\n             raise RepositoryError(e)\n \n-        if response.status_code in (401, 403):\n-            self._log(\n-                \"Authorization error accessing {url}\".format(url=response.url),\n-                level=\"warn\",\n-            )\n-            return\n-\n         if response.url != url:\n             self._log(\n                 \"Response URL {response_url} differs from request URL {url}\".format("
              }
            ],
            "tests": [
              {
                "sha": "a1db15952e1e9d07e18810ce76fb0b33d8d52588",
                "filename": "tests/repositories/test_legacy_repository.py",
                "status": "modified",
                "additions": 7,
                "deletions": 8,
                "changes": 15,
                "blob_url": "https://github.com/python-poetry/poetry/blob/3c9ced2e12618f9a9946a76c0430b8c80c0d0374/tests%2Frepositories%2Ftest_legacy_repository.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/3c9ced2e12618f9a9946a76c0430b8c80c0d0374/tests%2Frepositories%2Ftest_legacy_repository.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Frepositories%2Ftest_legacy_repository.py?ref=3c9ced2e12618f9a9946a76c0430b8c80c0d0374",
                "patch": "@@ -338,19 +338,18 @@ def test_get_200_returns_page(http):\n     assert repo._get(\"/foo\")\n \n \n-def test_get_404_returns_none(http):\n-    repo = MockHttpRepository({\"/foo\": 404}, http)\n+@pytest.mark.parametrize(\"status_code\", [401, 403, 404])\n+def test_get_40x_and_returns_none(http, status_code):\n+    repo = MockHttpRepository({\"/foo\": status_code}, http)\n \n     assert repo._get(\"/foo\") is None\n \n \n-def test_get_4xx_and_5xx_raises(http):\n-    endpoints = {\"/{}\".format(code): code for code in {401, 403, 500}}\n-    repo = MockHttpRepository(endpoints, http)\n+def test_get_5xx_raises(http):\n+    repo = MockHttpRepository({\"/foo\": 500}, http)\n \n-    for endpoint in endpoints:\n-        with pytest.raises(RepositoryError):\n-            repo._get(endpoint)\n+    with pytest.raises(RepositoryError):\n+        repo._get(\"/foo\")\n \n \n def test_get_redirected_response_url(http, monkeypatch):"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "poetry run pytest tests/repositories/test_legacy_repository.py"
    },
    {
      "id": 3263,
      "created_at": "2020-10-21T18:40:02Z",
      "closed_at": "2020-10-23T21:22:15Z",
      "title": " Poetry attempts to install all VCS deps as editable, even when `develop = false`.",
      "labels": "kind/bug",
      "text_based": false,
      "commits": [
        {
          "hash": "7c728f0aacb0abf1084c7cc189f2ed24e43386b3",
          "commit_date": "2020-10-23T21:22:09Z",
          "parents": "3067fd4af68addc13aad37048637617a0c68e322",
          "stat": {
            "total": 1,
            "additions": 13,
            "deletions": 12,
            "files": [
              {
                "sha": "f1637407068cb0fa659d393ef78be8c91f44c026",
                "filename": "poetry/packages/locker.py",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/python-poetry/poetry/blob/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/poetry%2Fpackages%2Flocker.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/poetry%2Fpackages%2Flocker.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/poetry%2Fpackages%2Flocker.py?ref=7c728f0aacb0abf1084c7cc189f2ed24e43386b3",
                "patch": "@@ -582,7 +582,7 @@ def _dump_package(self, package):  # type: (Package) -> dict\n             if package.source_resolved_reference:\n                 data[\"source\"][\"resolved_reference\"] = package.source_resolved_reference\n \n-            if package.source_type == \"directory\":\n+            if package.source_type in [\"directory\", \"git\"]:\n                 data[\"develop\"] = package.develop\n \n         return data"
              },
              {
                "sha": "c05efbd68447ce011e97e65bc5dc95c736532f07",
                "filename": "poetry/puzzle/provider.py",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/python-poetry/poetry/blob/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/poetry%2Fpuzzle%2Fprovider.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/poetry%2Fpuzzle%2Fprovider.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/poetry%2Fpuzzle%2Fprovider.py?ref=7c728f0aacb0abf1084c7cc189f2ed24e43386b3",
                "patch": "@@ -168,6 +168,7 @@ def search_for_vcs(self, dependency):  # type: (VCSDependency) -> List[Package]\n             rev=dependency.rev,\n             name=dependency.name,\n         )\n+        package.develop = dependency.develop\n \n         dependency._constraint = package.version\n         dependency._pretty_constraint = package.version.text"
              }
            ],
            "tests": [
              {
                "sha": "7fa89a44962630a95a23278a2e03a8944367d046",
                "filename": "tests/packages/test_locker.py",
                "status": "modified",
                "additions": 1,
                "deletions": 0,
                "changes": 1,
                "blob_url": "https://github.com/python-poetry/poetry/blob/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/tests%2Fpackages%2Ftest_locker.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/tests%2Fpackages%2Ftest_locker.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Fpackages%2Ftest_locker.py?ref=7c728f0aacb0abf1084c7cc189f2ed24e43386b3",
                "patch": "@@ -73,6 +73,7 @@ def test_lock_file_data_is_ordered(locker, root):\n category = \"main\"\n optional = false\n python-versions = \"*\"\n+develop = true\n \n [package.source]\n type = \"git\""
              },
              {
                "sha": "ecab7f3ab2d8d92883d3817cd0af311fd06e903f",
                "filename": "tests/puzzle/test_provider.py",
                "status": "modified",
                "additions": 9,
                "deletions": 0,
                "changes": 9,
                "blob_url": "https://github.com/python-poetry/poetry/blob/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/tests%2Fpuzzle%2Ftest_provider.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/7c728f0aacb0abf1084c7cc189f2ed24e43386b3/tests%2Fpuzzle%2Ftest_provider.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Fpuzzle%2Ftest_provider.py?ref=7c728f0aacb0abf1084c7cc189f2ed24e43386b3",
                "patch": "@@ -47,6 +47,15 @@ def provider(root, pool):\n     return Provider(root, pool, NullIO())\n \n \n+@pytest.mark.parametrize(\"value\", [True, False])\n+def test_search_for_vcs_retains_develop_flag(provider, value):\n+    dependency = VCSDependency(\n+        \"demo\", \"git\", \"https://github.com/demo/demo.git\", develop=value\n+    )\n+    package = provider.search_for_vcs(dependency)[0]\n+    assert package.develop == value\n+\n+\n def test_search_for_vcs_setup_egg_info(provider):\n     dependency = VCSDependency(\"demo\", \"git\", \"https://github.com/demo/demo.git\")\n "
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "poetry run pytest tests/packages/test_locker.py\npoetry run pytest tests/puzzle/test_provider.py"
    },
    {
      "id": 3224,
      "created_at": "2020-10-16T12:56:56Z",
      "closed_at": "2020-10-23T21:22:14Z",
      "title": "Extra dependencies for package on private repo uninstalled when running `poetry install`.",
      "labels": "kind/bug",
      "text_based": false,
      "commits": [
        {
          "hash": "89e1d7c11c7566e5735173e17a041a4894f870a4",
          "commit_date": "2020-10-23T21:22:09Z",
          "parents": "68f2cc7032d738981a4af52fdff159df95e55a12",
          "stat": {
            "total": 7,
            "additions": 229,
            "deletions": 222,
            "files": [
              {
                "sha": "ac7915374508207c02f8141b41c5fe4c071c1523",
                "filename": "poetry/packages/locker.py",
                "status": "modified",
                "additions": 17,
                "deletions": 6,
                "changes": 23,
                "blob_url": "https://github.com/python-poetry/poetry/blob/89e1d7c11c7566e5735173e17a041a4894f870a4/poetry%2Fpackages%2Flocker.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/89e1d7c11c7566e5735173e17a041a4894f870a4/poetry%2Fpackages%2Flocker.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/poetry%2Fpackages%2Flocker.py?ref=89e1d7c11c7566e5735173e17a041a4894f870a4",
                "patch": "@@ -24,12 +24,14 @@\n \n import poetry.repositories\n \n+from poetry.core.packages import dependency_from_pep_508\n from poetry.core.packages.package import Dependency\n from poetry.core.packages.package import Package\n from poetry.core.semver import parse_constraint\n from poetry.core.semver.version import Version\n from poetry.core.toml.file import TOMLFile\n from poetry.core.version.markers import parse_marker\n+from poetry.core.version.requirements import InvalidRequirement\n from poetry.packages import DependencyPackage\n from poetry.utils._compat import OrderedDict\n from poetry.utils._compat import Path\n@@ -142,11 +144,18 @@ def locked_repository(\n                     package.extras[name] = []\n \n                     for dep in deps:\n-                        m = re.match(r\"^(.+?)(?:\\s+\\((.+)\\))?$\", dep)\n-                        dep_name = m.group(1)\n-                        constraint = m.group(2) or \"*\"\n-\n-                        package.extras[name].append(Dependency(dep_name, constraint))\n+                        try:\n+                            dependency = dependency_from_pep_508(dep)\n+                        except InvalidRequirement:\n+                            # handle lock files with invalid PEP 508\n+                            m = re.match(r\"^(.+?)(?:\\[(.+?)])?(?:\\s+\\((.+)\\))?$\", dep)\n+                            dep_name = m.group(1)\n+                            extras = m.group(2) or \"\"\n+                            constraint = m.group(3) or \"*\"\n+                            dependency = Dependency(\n+                                dep_name, constraint, extras=extras.split(\",\")\n+                            )\n+                        package.extras[name].append(dependency)\n \n             if \"marker\" in info:\n                 package.marker = parse_marker(info[\"marker\"])\n@@ -543,8 +552,10 @@ def _dump_package(self, package):  # type: (Package) -> dict\n         if package.extras:\n             extras = {}\n             for name, deps in package.extras.items():\n+                # TODO: This should use dep.to_pep_508() once this is fixed\n+                # https://github.com/python-poetry/poetry-core/pull/102\n                 extras[name] = [\n-                    str(dep) if not dep.constraint.is_any() else dep.name\n+                    dep.base_pep_508_name if not dep.constraint.is_any() else dep.name\n                     for dep in deps\n                 ]\n "
              }
            ],
            "tests": [
              {
                "sha": "042e29670e184a8b243f9fcf31292de337e501f4",
                "filename": "tests/installation/fixtures/with-dependencies-extras.test",
                "status": "modified",
                "additions": 1,
                "deletions": 1,
                "changes": 2,
                "blob_url": "https://github.com/python-poetry/poetry/blob/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-extras.test",
                "raw_url": "https://github.com/python-poetry/poetry/raw/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-extras.test",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-extras.test?ref=89e1d7c11c7566e5735173e17a041a4894f870a4",
                "patch": "@@ -18,7 +18,7 @@ python-versions = \"*\"\n C = {version = \"^1.0\", optional = true}\n \n [package.extras]\n-foo = [\"C (^1.0)\"]\n+foo = [\"C (>=1.0,<2.0)\"]\n \n [[package]]\n name = \"C\""
              },
              {
                "sha": "48a22a7c7f3e6566507efb76fca27e40b4d43d01",
                "filename": "tests/installation/fixtures/with-dependencies-nested-extras.test",
                "status": "added",
                "additions": 45,
                "deletions": 0,
                "changes": 45,
                "blob_url": "https://github.com/python-poetry/poetry/blob/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-nested-extras.test",
                "raw_url": "https://github.com/python-poetry/poetry/raw/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-nested-extras.test",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Finstallation%2Ffixtures%2Fwith-dependencies-nested-extras.test?ref=89e1d7c11c7566e5735173e17a041a4894f870a4",
                "patch": "@@ -0,0 +1,45 @@\n+[[package]]\n+name = \"A\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[package.dependencies]\n+B = {version = \"^1.0\", optional = true, extras = [\"C\"]}\n+\n+[package.extras]\n+B = [\"B[C] (>=1.0,<2.0)\"]\n+\n+[[package]]\n+name = \"B\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[package.dependencies]\n+C = {version = \"^1.0\", optional = true}\n+\n+[package.extras]\n+C = [\"C (>=1.0,<2.0)\"]\n+\n+[[package]]\n+name = \"C\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[metadata]\n+python-versions = \"*\"\n+lock-version = \"1.1\"\n+content-hash = \"123456789\"\n+\n+[metadata.files]\n+\"A\" = []\n+\"B\" = []\n+\"C\" = []"
              },
              {
                "sha": "106efde6e9c4782318fce8284a7ab58fa553359b",
                "filename": "tests/installation/test_installer.py",
                "status": "modified",
                "additions": 29,
                "deletions": 0,
                "changes": 29,
                "blob_url": "https://github.com/python-poetry/poetry/blob/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ftest_installer.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Finstallation%2Ftest_installer.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Finstallation%2Ftest_installer.py?ref=89e1d7c11c7566e5735173e17a041a4894f870a4",
                "patch": "@@ -639,6 +639,35 @@ def test_run_with_dependencies_extras(installer, locker, repo, package):\n     assert locker.written_data == expected\n \n \n+def test_run_with_dependencies_nested_extras(installer, locker, repo, package):\n+    package_a = get_package(\"A\", \"1.0\")\n+    package_b = get_package(\"B\", \"1.0\")\n+    package_c = get_package(\"C\", \"1.0\")\n+\n+    dependency_c = Factory.create_dependency(\"C\", {\"version\": \"^1.0\", \"optional\": True})\n+    dependency_b = Factory.create_dependency(\n+        \"B\", {\"version\": \"^1.0\", \"optional\": True, \"extras\": [\"C\"]}\n+    )\n+    dependency_a = Factory.create_dependency(\"A\", {\"version\": \"^1.0\", \"extras\": [\"B\"]})\n+\n+    package_b.extras = {\"C\": [dependency_c]}\n+    package_b.add_dependency(dependency_c)\n+\n+    package_a.add_dependency(dependency_b)\n+    package_a.extras = {\"B\": [dependency_b]}\n+\n+    repo.add_package(package_a)\n+    repo.add_package(package_b)\n+    repo.add_package(package_c)\n+\n+    package.add_dependency(dependency_a)\n+\n+    installer.run()\n+    expected = fixture(\"with-dependencies-nested-extras\")\n+\n+    assert locker.written_data == expected\n+\n+\n def test_run_does_not_install_extras_if_not_requested(installer, locker, repo, package):\n     package.extras[\"foo\"] = [get_dependency(\"D\")]\n     package_a = get_package(\"A\", \"1.0\")"
              },
              {
                "sha": "a4aa17971f84d3e86a11e52062a1a773925d3ae4",
                "filename": "tests/packages/test_locker.py",
                "status": "modified",
                "additions": 130,
                "deletions": 0,
                "changes": 130,
                "blob_url": "https://github.com/python-poetry/poetry/blob/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Fpackages%2Ftest_locker.py",
                "raw_url": "https://github.com/python-poetry/poetry/raw/89e1d7c11c7566e5735173e17a041a4894f870a4/tests%2Fpackages%2Ftest_locker.py",
                "contents_url": "https://api.github.com/repos/python-poetry/poetry/contents/tests%2Fpackages%2Ftest_locker.py?ref=89e1d7c11c7566e5735173e17a041a4894f870a4",
                "patch": "@@ -142,6 +142,136 @@ def test_locker_properly_loads_extras(locker):\n     assert lockfile_dep.name == \"lockfile\"\n \n \n+def test_locker_properly_loads_nested_extras(locker):\n+    content = \"\"\"\\\n+[[package]]\n+name = \"a\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[package.dependencies]\n+b = {version = \"^1.0\", optional = true, extras = \"c\"}\n+\n+[package.extras]\n+b = [\"b[c] (>=1.0,<2.0)\"]\n+\n+[[package]]\n+name = \"b\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[package.dependencies]\n+c = {version = \"^1.0\", optional = true}\n+\n+[package.extras]\n+c = [\"c (>=1.0,<2.0)\"]\n+\n+[[package]]\n+name = \"c\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[metadata]\n+python-versions = \"*\"\n+lock-version = \"1.1\"\n+content-hash = \"123456789\"\n+\n+[metadata.files]\n+\"a\" = []\n+\"b\" = []\n+\"c\" = []\n+\"\"\"\n+\n+    locker.lock.write(tomlkit.parse(content))\n+\n+    repository = locker.locked_repository()\n+    assert 3 == len(repository.packages)\n+\n+    packages = repository.find_packages(get_dependency(\"a\", \"1.0\"))\n+    assert len(packages) == 1\n+\n+    package = packages[0]\n+    assert len(package.requires) == 1\n+    assert len(package.extras) == 1\n+\n+    dependency_b = package.extras[\"b\"][0]\n+    assert dependency_b.name == \"b\"\n+    assert dependency_b.extras == frozenset({\"c\"})\n+\n+    packages = repository.find_packages(dependency_b)\n+    assert len(packages) == 1\n+\n+    package = packages[0]\n+    assert len(package.requires) == 1\n+    assert len(package.extras) == 1\n+\n+    dependency_c = package.extras[\"c\"][0]\n+    assert dependency_c.name == \"c\"\n+    assert dependency_c.extras == frozenset()\n+\n+    packages = repository.find_packages(dependency_c)\n+    assert len(packages) == 1\n+\n+\n+def test_locker_properly_loads_extras_legacy(locker):\n+    content = \"\"\"\\\n+[[package]]\n+name = \"a\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[package.dependencies]\n+b = {version = \"^1.0\", optional = true}\n+\n+[package.extras]\n+b = [\"b (^1.0)\"]\n+\n+[[package]]\n+name = \"b\"\n+version = \"1.0\"\n+description = \"\"\n+category = \"main\"\n+optional = false\n+python-versions = \"*\"\n+\n+[metadata]\n+python-versions = \"*\"\n+lock-version = \"1.1\"\n+content-hash = \"123456789\"\n+\n+[metadata.files]\n+\"a\" = []\n+\"b\" = []\n+\"\"\"\n+\n+    locker.lock.write(tomlkit.parse(content))\n+\n+    repository = locker.locked_repository()\n+    assert 2 == len(repository.packages)\n+\n+    packages = repository.find_packages(get_dependency(\"a\", \"1.0\"))\n+    assert len(packages) == 1\n+\n+    package = packages[0]\n+    assert len(package.requires) == 1\n+    assert len(package.extras) == 1\n+\n+    dependency_b = package.extras[\"b\"][0]\n+    assert dependency_b.name == \"b\"\n+\n+\n def test_lock_packages_with_null_description(locker, root):\n     package_a = get_package(\"A\", \"1.0.0\")\n     package_a.description = None"
              }
            ]
          }
        }
      ],
      "manuallyChecked": true,
      "testSteps": "poetry run pytest tests/installation/test_installer.py\npoetry run pytest tests/packages/test_locker.py "
    }
  ],
  "installSteps": "pipx install poetry==1.2.0 --force\npoetry env use python3.8\npoetry install"
}]